#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include <thread>

// Function to clear the console screen (works on most systems)
void clearScreen() {
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif
}

int main() {
    // Seed the random number generator with the current time
    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    // Initialize variables
    std::vector<char> sequence;  // Stores the sequence of keys to press
    int score = 0;               // Player's score
    int round = 1;               // Current round number
    const int maxRounds = 5;     // Total number of rounds

    // Main game loop
    while (round <= maxRounds) {
        // Clear the screen at the start of each round
        clearScreen();

        // Display current round and score
        std::cout << "Round " << round << " of " << maxRounds << std::endl;
        std::cout << "Current Score: " << score << std::endl << std::endl;

        // Generate a random key (A, S, D, or F) and add it to the sequence
        char newKey = 'A' + (std::rand() % 4);  // Random number between 0 and 3, added to 'A'
        sequence.push_back(newKey);

        // Display the sequence to the player
        std::cout << "Remember this sequence: ";
        for (char key : sequence) {
            std::cout << key << " ";
            // Pause for a short time after displaying each key
            std::this_thread::sleep_for(std::chrono::milliseconds(500));
        }
        std::cout << std::endl;

        // Pause to let the player memorize the sequence
        std::this_thread::sleep_for(std::chrono::seconds(2));

        // Clear the screen
        clearScreen();

        // Prompt the player to enter the sequence
        std::cout << "Enter the sequence (no spaces): ";
        std::string playerInput;
        std::cin >> playerInput;

        // Check if the player's input matches the sequence
        bool correct = true;
        if (playerInput.length() == sequence.size()) {
            for (size_t i = 0; i < sequence.size(); ++i) {
                if (playerInput[i] != sequence[i]) {
                    correct = false;
                    break;
                }
            }
        } else {
            correct = false;
        }

        // Update score and provide feedback
        if (correct) {
            score += 10 * round;  // Higher rounds give more points
            std::cout << "Correct! You earned " << (10 * round) << " points." << std::endl;
        } else {
            std::cout << "Incorrect. The correct sequence was: ";
            for (char key : sequence) {
                std::cout << key << " ";
            }
            std::cout << std::endl;
        }

        // Pause before the next round
        std::this_thread::sleep_for(std::chrono::seconds(2));

        // Move to the next round
        ++round;
    }

    // Game over - display final score
    clearScreen();
    std::cout << "Game Over!" << std::endl;
    std::cout << "Final Score: " << score << std::endl;

    return 0;
}

Over
