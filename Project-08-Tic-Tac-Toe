#include <iostream>
#include <vector>

// Function to initialize the game board
std::vector<std::vector<char>> initializeBoard() {
    // Create a 3x3 vector filled with spaces
    return std::vector<std::vector<char>>(3, std::vector<char>(3, ' '));
}

// Function to display the current state of the board
void displayBoard(const std::vector<std::vector<char>>& board) {
    std::cout << "  1 2 3\n"; // Display column numbers
    for (int i = 0; i < 3; ++i) {
        std::cout << i + 1 << " "; // Display row numbers
        for (int j = 0; j < 3; ++j) {
            std::cout << board[i][j];
            if (j < 2) std::cout << "|"; // Add separators between columns
        }
        std::cout << "\n";
        if (i < 2) std::cout << "  -+-+-\n"; // Add separators between rows
    }
    std::cout << "\n";
}

// Function to check if a player has won
bool checkWin(const std::vector<std::vector<char>>& board, char player) {
    // Check rows
    for (int i = 0; i < 3; ++i) {
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
            return true;
        }
    }
    
    // Check columns
    for (int j = 0; j < 3; ++j) {
        if (board[0][j] == player && board[1][j] == player && board[2][j] == player) {
            return true;
        }
    }
    
    // Check diagonals
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
        return true;
    }
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
        return true;
    }
    
    return false;
}

// Function to check if the board is full (a tie)
bool isBoardFull(const std::vector<std::vector<char>>& board) {
    for (const auto& row : board) {
        for (char cell : row) {
            if (cell == ' ') return false; // If any cell is empty, the board is not full
        }
    }
    return true;
}

int main() {
    std::vector<std::vector<char>> board = initializeBoard();
    char currentPlayer = 'X';
    bool gameWon = false;
    
    std::cout << "Welcome to Tic-Tac-Toe!\n";
    
    while (!gameWon && !isBoardFull(board)) {
        displayBoard(board);
        
        int row, col;
        std::cout << "Player " << currentPlayer << ", enter your move (row and column): ";
        std::cin >> row >> col;
        
        // Adjust input to match array indices (subtract 1)
        row--;
        col--;
        
        // Check if the move is valid
        if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ') {
            board[row][col] = currentPlayer;
            
            // Check if the current player has won
            if (checkWin(board, currentPlayer)) {
                displayBoard(board);
                std::cout << "Player " << currentPlayer << " wins!\n";
                gameWon = true;
            } else {
                // Switch to the other player
                currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
            }
        } else {
            std::cout << "Invalid move. Try again.\n";
        }
    }
    
    // If the game wasn't won, it must be a tie
    if (!gameWon) {
        displayBoard(board);
        std::cout << "It's a tie!\n";
    }
    
    return 0;
}
