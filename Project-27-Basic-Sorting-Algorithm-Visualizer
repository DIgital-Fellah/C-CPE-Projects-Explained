#include <iostream>
#include <vector>
#include <thread>
#include <chrono>

// Function to print the current state of the vector
void printVector(const std::vector<int>& vec) {
    for (int num : vec) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
}

// Function to visualize the sorting process
void visualizeSorting(const std::vector<int>& vec) {
    // Clear the console (note: this is system-dependent)
    std::cout << "\033[2J\033[1;1H";
    
    // Print the current state of the vector
    printVector(vec);
    
    // Pause for a short duration to make the visualization visible
    std::this_thread::sleep_for(std::chrono::milliseconds(200));
}

// Bubble Sort algorithm
void bubbleSort(std::vector<int>& vec) {
    int n = vec.size();
    
    // Outer loop: iterate through all elements
    for (int i = 0; i < n - 1; i++) {
        // Inner loop: compare adjacent elements
        for (int j = 0; j < n - i - 1; j++) {
            // If the current element is greater than the next one, swap them
            if (vec[j] > vec[j + 1]) {
                std::swap(vec[j], vec[j + 1]);
                
                // Visualize the current state after the swap
                visualizeSorting(vec);
            }
        }
    }
}

int main() {
    // Create a vector with unsorted integers
    std::vector<int> numbers = {64, 34, 25, 12, 22, 11, 90};
    
    std::cout << "Original vector:" << std::endl;
    printVector(numbers);
    
    std::cout << "Press Enter to start sorting...";
    std::cin.get(); // Wait for user input
    
    // Perform bubble sort and visualize the process
    bubbleSort(numbers);
    
    std::cout << "Sorted vector:" << std::endl;
    printVector(numbers);
    
    return 0;
}
