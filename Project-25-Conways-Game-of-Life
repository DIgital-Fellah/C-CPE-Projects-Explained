#include <iostream>
#include <vector>
#include <chrono>
#include <thread>

// Function to initialize the grid with random cells
void initializeGrid(std::vector<std::vector<bool>>& grid) {
    // Loop through each cell in the grid
    for (int i = 0; i < grid.size(); i++) {
        for (int j = 0; j < grid[i].size(); j++) {
            // Randomly set each cell to alive (true) or dead (false)
            grid[i][j] = (rand() % 2 == 0);
        }
    }
}

// Function to print the current state of the grid
void printGrid(const std::vector<std::vector<bool>>& grid) {
    // Loop through each cell in the grid
    for (const auto& row : grid) {
        for (bool cell : row) {
            // Print 'O' for live cells and '.' for dead cells
            std::cout << (cell ? 'O' : '.');
        }
        std::cout << std::endl;
    }
    std::cout << std::endl;
}

// Function to count live neighbors of a cell
int countLiveNeighbors(const std::vector<std::vector<bool>>& grid, int x, int y) {
    int count = 0;
    // Check all 8 neighboring cells
    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            // Skip the cell itself
            if (i == 0 && j == 0) continue;
            
            // Calculate neighbor coordinates
            int newX = x + i;
            int newY = y + j;
            
            // Check if neighbor is within grid bounds
            if (newX >= 0 && newX < grid.size() && newY >= 0 && newY < grid[0].size()) {
                // Increment count if neighbor is alive
                if (grid[newX][newY]) count++;
            }
        }
    }
    return count;
}

// Function to update the grid based on Game of Life rules
void updateGrid(std::vector<std::vector<bool>>& grid) {
    // Create a copy of the grid to store the next generation
    std::vector<std::vector<bool>> newGrid = grid;
    
    // Loop through each cell in the grid
    for (int i = 0; i < grid.size(); i++) {
        for (int j = 0; j < grid[i].size(); j++) {
            // Count live neighbors for current cell
            int liveNeighbors = countLiveNeighbors(grid, i, j);
            
            // Apply Game of Life rules
            if (grid[i][j]) {
                // Cell is currently alive
                if (liveNeighbors < 2 || liveNeighbors > 3) {
                    // Cell dies due to under- or over-population
                    newGrid[i][j] = false;
                }
            } else {
                // Cell is currently dead
                if (liveNeighbors == 3) {
                    // Cell becomes alive due to reproduction
                    newGrid[i][j] = true;
                }
            }
        }
    }
    
    // Update the original grid with the new generation
    grid = newGrid;
}

int main() {
    // Set the dimensions of the grid
    const int ROWS = 20;
    const int COLS = 40;
    
    // Create a 2D vector to represent the grid
    std::vector<std::vector<bool>> grid(ROWS, std::vector<bool>(COLS, false));
    
    // Initialize the grid with random live/dead cells
    initializeGrid(grid);
    
    // Main game loop
    for (int generation = 0; generation < 100; generation++) {
        // Clear the console (note: this is Windows-specific, use appropriate command for other OS)
        system("cls");
        
        // Print the current generation number
        std::cout << "Generation: " << generation << std::endl;
        
        // Print the current state of the grid
        printGrid(grid);
        
        // Update the grid for the next generation
        updateGrid(grid);
        
        // Pause for a short time to make the animation visible
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }
    
    return 0;
}
