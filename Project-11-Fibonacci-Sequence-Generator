#include <iostream>
#include <vector>

// Function to generate Fibonacci sequence using recursion
int fibonacciRecursive(int n) {
    // Base cases: if n is 0 or 1, return n
    if (n <= 1) {
        return n;
    }
    // Recursive case: Fibonacci(n) = Fibonacci(n-1) + Fibonacci(n-2)
    return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
}

// Function to generate Fibonacci sequence using iteration
std::vector<int> fibonacciIterative(int n) {
    // Create a vector to store the Fibonacci sequence
    std::vector<int> fib;
    
    // Handle special cases for n = 0 and n = 1
    if (n >= 0) {
        fib.push_back(0);  // First Fibonacci number is 0
    }
    if (n >= 1) {
        fib.push_back(1);  // Second Fibonacci number is 1
    }
    
    // Generate the rest of the sequence
    for (int i = 2; i <= n; ++i) {
        // Each number is the sum of the two preceding ones
        int next = fib[i-1] + fib[i-2];
        fib.push_back(next);
    }
    
    return fib;
}

int main() {
    int n;
    char choice;

    // Get user input for the number of Fibonacci terms
    std::cout << "Enter the number of Fibonacci terms to generate: ";
    std::cin >> n;

    // Ask user to choose between recursive and iterative methods
    std::cout << "Choose method (R for recursive, I for iterative): ";
    std::cin >> choice;

    if (choice == 'R' || choice == 'r') {
        // Recursive method
        std::cout << "Fibonacci sequence (recursive):" << std::endl;
        for (int i = 0; i < n; ++i) {
            std::cout << fibonacciRecursive(i) << " ";
        }
        std::cout << std::endl;
    } else if (choice == 'I' || choice == 'i') {
        // Iterative method
        std::cout << "Fibonacci sequence (iterative):" << std::endl;
        std::vector<int> fibSequence = fibonacciIterative(n - 1);
        for (int num : fibSequence) {
            std::cout << num << " ";
        }
        std::cout << std::endl;
    } else {
        // Invalid choice
        std::cout << "Invalid choice. Please run the program again and choose R or I." << std::endl;
    }

    return 0;
}
